@page "/messages"
@using Gui.Services
@using Gui.Models.DTO
@using Newtonsoft.Json;
@inject FilterService filterService
@inject HttpClient client
@inject SweetAlertService Swal

<PageTitle>Таблица сообщений</PageTitle>

@if (list == null)
{
    <div class="load">
        <hr /><hr /><hr /><hr />
    </div>
}
else
{
    <div style="position:relative">
        <div class="row">
            <button class="col-3 btn btn-outline-primary" @onclick="UpdateTable">Обновить таблицу</button>
            <div class="col-3" style="display: flex;align-items: center;">
                Записей в базе данных: @pageMessages.countAllMessages
            </div>
            <div class="btn-group col-6" role="group">
                <button class="col-6 btn btn-outline-primary" @onclick=ShowAll>@visibiTextButton</button>
                <button class="btn btn-outline-danger" @onclick="ClearTable">Очистить таблицу</button>
            </div>

        </div>
        <div class="p-4">
            <table class="tableMessage" id="tMess">
                <thead>
                    <tr>
                        <th>№</th>
                        <th>Дата добавления</th>
                        <th>Сообщение</th>
                        <th>Тип сообщения</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in list)
                    {
                        <tr>
                            <td>@(counter++)</td>
                            <td>@item.Date</td>
                            <td>@item.Info</td>
                            <td>@item.TypeInfo</td>
                        </tr>
                    }
                </tbody>
            </table>
            <div style="@visibility position:fixed; left: 45%; height: 35px; margin-bottom:15px; bottom: 0; align-content:center; -webkit-box-shadow: 0px 0px 73px 3px rgba(34, 60, 80, 0.2); -moz-box-shadow: 0px 0px 73px 3px rgba(34, 60, 80, 0.2); box-shadow: 0px 0px 73px 3px rgba(34, 60, 80, 0.2);">
                <ul class="pagination">
                    @foreach (var item in pagination)
                    {
                        if (item != "...")
                        {
                            if (Convert.ToInt32(item) != Page)
                            {
                                <li class="page-item" style="user-select:none"><a @onclick=@(() => SelectPage(Convert.ToInt32(item))) class="page-link">@item</a></li>
                            }
                            else
                            {
                                <li class="page-item active" style="user-select:none"><a @onclick=@(() => SelectPage(Convert.ToInt32(item))) class="page-link">@item</a></li>
                            }
                        }
                        else
                        {
                            <li class="page-item" style="user-select:none"><a class="page-link">@item</a></li>
                        }

                    }
                </ul>
            </div>
        </div>
    </div>
}


@code {
    private PageMessages pageMessages;
    private List<MessageDTO> list;
    private int counter = 1;
    private int Page = 1;
    private List<string> pagination = new List<string>();
    private bool showAll = false;
    private string visibility = "";
    private string visibiTextButton = "Показать все сообщения";

    protected override async Task OnInitializedAsync()
    {
        await UpdateTable();
    }

    private void ClearTable()
    {
        filterService = new FilterService(client);
        var response = filterService.ClearMessagesAsync<ResponseDTO>();
        list.Clear();
        Swal.FireAsync("Таблица успешно очищена");
        if (pageMessages != null)
        {
            pageMessages.countAllMessages = 0;
        }
        LoadPagination();
    }

    private async Task UpdateTable()
    {
        list = null;
        if(Page == 0){
            counter = 1;
        }else{
            counter = (Page - 1) * 100 + 1;
        }

        filterService = new FilterService(client);
        var response = await filterService.GetAllMessagesAsync<ResponseDTO>((ulong)Page);
        if (response != null)
        {
            pageMessages = JsonConvert.DeserializeObject<PageMessages>(Convert.ToString(response.Result));
        }
        LoadPagination();
        list = pageMessages.messages.ToList();
    }

    private void LoadPagination()
    {
        if (pageMessages != null)
        {
            pagination.Clear();
            var allPages = Convert.ToInt32(pageMessages.countAllMessages / 100 + 1);    //100 элементов на странице, жестко задано в сервисе
            if (allPages <= 9)
            {
                for (int i = 0; i < allPages; i++)
                {
                    pagination.Add($"{i + 1}");
                }
            }
            else
            {
                if (Page <= 3)
                {
                    for (int i = 0; i < Page + 2; i++)
                    {
                        pagination.Add($"{i + 1}");
                    }
                    pagination.Add("...");
                    pagination.Add($"{allPages}");
                }
                if (Page >= allPages - 2)
                {
                    pagination.Add("1");
                    pagination.Add("...");
                    for (int i = Page - 2; i < allPages; i++)
                    {
                        pagination.Add($"{i + 1}");
                    }
                }
                if (Page > 3 && Page < (allPages - 2))
                {
                    pagination.Add("1");
                    pagination.Add("...");
                    for (int i = Page - 3; i < Page + 2; i++)
                    {
                        pagination.Add($"{i + 1}");
                    }
                    pagination.Add("...");
                    pagination.Add($"{allPages}");
                }
            }
        }
    }

    private async Task SelectPage(int id)
    {
        Page = id;
        await UpdateTable();
    }

    private async Task ShowAll(){
        showAll = !showAll;
        visibility = showAll ? "visibility:hidden;" : "";
        visibiTextButton = showAll ? "Страничный режим" : "Показать все сообщения";
        if(showAll){
            Page = 0;
            await UpdateTable();
        }else{
            Page = 1;
            await UpdateTable();
        }
    }
}